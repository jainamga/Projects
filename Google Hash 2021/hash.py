# -*- coding: utf-8 -*-
"""Hash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LuN3C-xRRI2hciZl8v22Yhh2vxKm6Lck
"""

import pandas as pd

myfile = open("a.txt")
f = myfile.readline()
f1 = list(map(int,f.split()))

d = f1[0]
inter = f1[1]
street = f1[2]
cars = f1[3]
score = f1[4]
stemp = street

# Add a vertex to the dictionary
def add_vertex(v):
  global graph
  global vertices_no
  if v in graph:
    print("Vertex ", v, " already exists.")
  else:
    vertices_no = vertices_no + 1
    graph[v] = []

# Add an edge between vertex v1 and v2 with edge weight e
def add_edge(v1, v2, e , sname):
  global graph
  # Check if vertex v1 is a valid vertex
  if v1 not in graph:
    print("Vertex ", v1, " does not exist.")
  # Check if vertex v2 is a valid vertex
  elif v2 not in graph:
    print("Vertex ", v2, " does not exist.")
  else:
    # Since this code is not restricted to a directed or 
    # an undirected graph, an edge between v1 v2 does not
    # imply that an edge exists between v2 and v1
    temp = [v2, e, sname]
    graph[v1].append(temp)

# Print the graph
def print_graph():
  global graph
  for vertex in graph:
    for edges in graph[vertex]:
      print(vertex, " -> ", edges[0], " edge weight: ", edges[1])

# driver code
graph = {}
# stores the number of vertices in the graph
myfile.close()
myfile=open('a.txt',"r")
f = myfile.readline()
vertices_no = 0
while stemp>0:
  f = myfile.readline()
  f1 = list(f.split())
  print(f1)
  add_vertex(int(f1[0]))
  add_vertex(int(f1[1]))
  add_edge(int(f1[0]),int(f1[1]),int(f1[3]),f1[2])
  stemp-=1

c = cars

croutes = []

while c>0:
  f = myfile.readline()
  f1 = list(f.split())
  del f1[0]
  croutes.append(f1)
  c-=1

print(croutes)

myfile.close()




# Add the edges between the vertices by specifying
# the from and to vertex along with the edge weights.

print_graph()
# Reminder: the second element of each list inside the dictionary
# denotes the edge weight.
print ("Internal representation: ", graph)



dur = d
coun = {}
myfile = open("opaf.txt","a")
myfile.write(str(inter)+"\n")
print(inter)

for v in graph.values():
  for s in v:
    if s[0] not in coun:
      coun[s[0]] = 1
    else:
      coun[s[0]]+=1
#print(count)
name = ""


for k,v in coun.items():
    flg = 0
    for m in graph.values():
      for t in m:
        if k == t[0] and flg == 0:
          name = t[2]
          flg = 1
        
      
          myfile.write(str(k)+"\n"+str(v)+"\n")
          print(str(k)+"\n"+str(v))
        if k == t[0] and flg == 1:
          name = t[2]
          print(name+" 1")
          myfile.write(name+" 1\n")




    


myfile.close()